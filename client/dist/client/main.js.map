{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auth.guard.ts","./src/app/auth.service.ts","./src/app/chat.service.ts","./src/app/chat/chat.component.ts","./src/app/chat/chat.component.html","./src/app/db.service.ts","./src/app/dm-list/dm-list.component.ts","./src/app/dm-list/dm-list.component.html","./src/app/dmtool-delete-sp/dmtool-delete-sp.component.ts","./src/app/dmtool-delete-sp/dmtool-delete-sp.component.html","./src/app/dmtool-delete/dmtool-delete.component.ts","./src/app/dmtool-delete/dmtool-delete.component.html","./src/app/dmtool-register-sp/dmtool-register-sp.component.ts","./src/app/dmtool-register-sp/dmtool-register-sp.component.html","./src/app/dmtool-register/dmtool-register.component.ts","./src/app/dmtool-register/dmtool-register.component.html","./src/app/dmtool/dmtool.component.ts","./src/app/dmtool/dmtool.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/log/log.component.ts","./src/app/log/log.component.html","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/mat-paginator-jp.ts","./src/app/navi-delete/navi-delete.component.ts","./src/app/navi-delete/navi-delete.component.html","./src/app/navi/navi.component.ts","./src/app/navi/navi.component.html","./src/app/oauth/oauth.component.ts","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/spinner.service.ts","./src/app/summary/summary.component.ts","./src/app/summary/summary.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DmtoolComponent } from './dmtool/dmtool.component';\r\nimport { LogComponent } from './log/log.component';\r\nimport { OauthComponent } from './oauth/oauth.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AuthGuard } from './auth.guard';\r\nimport { ChatComponent } from './chat/chat.component';\r\nimport { DmListComponent } from './dm-list/dm-list.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'oauth', component: OauthComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n  { path: 'home',\r\n    component: HomeComponent,\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      { path: 'account', component: DmtoolComponent },\r\n      { path: 'log', component: LogComponent },\r\n      //{ path: 'dm/:id', component: DmListComponent },\r\n      { path: 'dm/:id/:dmUser', component: ChatComponent }\r\n    ]\r\n  },\r\n  { path: \"**\", redirectTo: \"home\" }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'タイトル未定';\r\n}\r\n","<router-outlet></router-outlet>","import { NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { TextFieldModule } from '@angular/cdk/text-field';\r\n\r\n/* Material */\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule, MatPaginatorIntl } from '@angular/material/paginator';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatProgressSpinnerModule, MatSpinner } from '@angular/material/progress-spinner';\r\n\r\n/* Component */\r\nimport { AppComponent } from './app.component';\r\nimport { NaviComponent } from './navi/navi.component';\r\nimport { DmtoolComponent } from './dmtool/dmtool.component';\r\nimport { LogComponent } from './log/log.component';\r\nimport { OauthComponent } from './oauth/oauth.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { DmtoolRegisterComponent } from './dmtool-register/dmtool-register.component';\r\nimport { DmtoolDeleteComponent } from './dmtool-delete/dmtool-delete.component';\r\nimport { DmtoolRegisterSpComponent } from './dmtool-register-sp/dmtool-register-sp.component';\r\nimport { DmtoolDeleteSpComponent } from './dmtool-delete-sp/dmtool-delete-sp.component';\r\nimport { SummaryComponent } from './summary/summary.component';\r\nimport { NaviDeleteComponent } from './navi-delete/navi-delete.component';\r\n\r\n/* Class */\r\nimport { MatPaginatorIntlJa } from './mat-paginator-jp';\r\nimport { ChatComponent } from './chat/chat.component';\r\nimport { DmListComponent } from './dm-list/dm-list.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NaviComponent,\r\n    DmtoolComponent,\r\n    LogComponent,\r\n    OauthComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    DmtoolRegisterComponent,\r\n    DmtoolDeleteComponent,\r\n    DmtoolRegisterSpComponent,\r\n    DmtoolDeleteSpComponent,\r\n    SummaryComponent,\r\n    NaviDeleteComponent,\r\n    ChatComponent,\r\n    DmListComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatSlideToggleModule,\r\n    MatTableModule,\r\n    MatDialogModule,\r\n    HttpClientModule,\r\n    FlexLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatAutocompleteModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatTabsModule,\r\n    MatProgressSpinnerModule,\r\n    OverlayModule,\r\n    PortalModule,\r\n    TextFieldModule\r\n  ],\r\n  entryComponents: [\r\n    MatSpinner\r\n  ],\r\n  providers: [{provide: MatPaginatorIntl, useClass: MatPaginatorIntlJa}],\r\n  //providers: [],\r\n  bootstrap: [AppComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { map } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authService.isAuthenticated()\n    .pipe(\n      map(result => {\n        if(!result){\n          this.router.navigate(['login'], {queryParams: {redirectTo: state.url}});\n        }\n        return result;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { shareReplay, catchError} from 'rxjs/operators';\r\nimport { twitter } from './models/twitter';\r\nimport { user } from './models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  login(user: user): Observable<boolean>{\r\n    return this.http.post<boolean>('user/login', user, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false)),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  create(user: user): Observable<boolean> {\r\n    return this.http.post<boolean>('user/create', user, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false)),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  exist(kind: string, id: string): Observable<boolean> {\r\n    const url = `/${kind}/exist/${id}`;\r\n    return this.http.get<boolean>(url, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    );\r\n  }\r\n\r\n  isAuthenticated(): Observable<boolean> {\r\n    return this.http.get<boolean>('user/check', this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    );\r\n  }\r\n\r\n  logout(): Observable<boolean>{\r\n    return this.http.get<boolean>('user/logout', this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    );\r\n  }\r\n\r\n  requestToken(screen_name: string): Observable<any> {\r\n    return this.http.get<any>(`oauth/requestToken/${screen_name}`, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<any>())\r\n    );\r\n  }\r\n\r\n  checkToken(screen_name: string, oauth_token: string): Observable<boolean> {\r\n    return this.http.post<boolean>('oauth/checkToken', JSON.stringify({\r\n      screen_name: screen_name, oauth_token: oauth_token\r\n    }), this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    )\r\n  }\r\n\r\n  exchangeToken(screen_name: string, oauth_verifier: string): Observable<boolean> {\r\n    return this.http.post<boolean>('oauth/exchangeToken', JSON.stringify({\r\n      screen_name: screen_name, oauth_verifier: oauth_verifier\r\n    }), this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    );\r\n  }\r\n\r\n  handleError<T>(result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.log(error);\r\n      return of(result as T);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, shareReplay } from 'rxjs/operators';\r\nimport { message } from './models/message';\r\nimport { dmUser } from './models/dmUser';\r\n\r\nexport interface text {\r\n  text: string\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService { \r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  create(id: string): Observable<boolean> {\r\n    return this.http.get<boolean>(`/chat/create/${id}`, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false)),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  send(id: string, text: string, sub_id: string): Observable<boolean> {\r\n    return this.http.post<boolean>(`/chat/send/${id}/${sub_id}`, JSON.stringify({text: text}),this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false)),\r\n    );\r\n  }\r\n\r\n  update(id: string, sub_id: string): Observable<message[]> {\r\n    return this.http.get<message[]>(`/chat/update/${id}/${sub_id}`, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<message[]>([])),\r\n    );\r\n  }\r\n\r\n  delete(id: string): Observable<boolean> {\r\n    return this.http.delete<boolean>(`/chat/delete/${id}`, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false)),\r\n    );\r\n  }\r\n\r\n  getdmUserList(id: string): Observable<dmUser[]> {\r\n    return this.http.get<dmUser[]>(`/chat/dmUserList/${id}`, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<dmUser[]>([])),\r\n    );\r\n  }\r\n\r\n  getScreenName(id: string, sub_id: string): Observable<text> {\r\n    return this.http.get<text>(`/chat/screenName/${id}/${sub_id}`, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<text>()),\r\n    );\r\n  }\r\n\r\n  private handleError<T>(result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ChatService } from '../chat.service';\r\nimport { message } from '../models/message';\r\nimport { Subject, interval, Observable, Subscription } from 'rxjs';\r\nimport { mergeMap, takeWhile } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface opposite {\r\n  name: string,\r\n  id: string\r\n}\r\n\r\n@Component({\r\n  selector: 'app-chat',\r\n  templateUrl: './chat.component.html',\r\n  styleUrls: ['./chat.component.scss']\r\n})\r\nexport class ChatComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  messages: message[] = [];\r\n  private subject: Subject<message[]> = new Subject();\r\n  screen_name: string = '';\r\n  opposite: opposite = {\r\n    name: '',\r\n    id: ''\r\n  }\r\n  subscription: Subscription = new Subscription();\r\n  text: string = '';\r\n\r\n  //@ViewChild('scroll', {read: ElementRef}) scroll!: ElementRef;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private location: Location,\r\n    private chatService: ChatService,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if(!this.route.snapshot.paramMap.get('id') || !this.route.snapshot.paramMap.get('dmUser')){\r\n      this.failed();\r\n    }\r\n    else{\r\n      this.screen_name = this.route.snapshot.paramMap.get('id')!;\r\n      this.opposite.id = this.route.snapshot.paramMap.get('dmUser')!;\r\n      this.chatService.create(this.screen_name)\r\n      .subscribe(result => {\r\n        if(result){\r\n          this.initMsg();\r\n          this.getScreenName();\r\n          this.recieveMsg();\r\n          this.subscription = this.polling().subscribe(data => {\r\n            this.subject.next(data);\r\n          });\r\n        }\r\n        else{\r\n          // Already created, means it haven't deleted correctly\r\n          this.snackBar.open('エラーが発生しました。やり直してください', '閉じる', {duration: 8000});\r\n          this.onExit();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(this.scrollToBottom, 500);\r\n  }\r\n\r\n  scrollToBottom(): void {\r\n    console.log(document.querySelector('mat-sidenav-content')!.scrollTop);\r\n    console.log(document.querySelector('mat-sidenav-content')!.scrollHeight);\r\n  \r\n    document.querySelector('mat-sidenav-content')!.scrollTop = document.querySelector('mat-sidenav-content')!.scrollHeight;\r\n  }\r\n\r\n  private recieveMsg(): void {\r\n    this.subject.subscribe({\r\n      next: msgs => {\r\n        //console.log(msgs);\r\n        for(let msg of msgs){\r\n          let date = new Date(Number(msg.timestamp));\r\n          if(!this.messages.map(msg => msg.id).includes(msg.id)){\r\n            this.messages.push({\r\n              id: msg.id,\r\n              self: msg.self,\r\n              text: msg.text,\r\n              timestamp: `${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${('0' + date.getMinutes()).slice(-2)}`\r\n            });\r\n            setTimeout(this.scrollToBottom, 500);\r\n          }\r\n        }\r\n      },\r\n      error: e => console.log('error: ', e),\r\n      complete: () => {\r\n        console.log('disconnected');\r\n        this.subscription.unsubscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  sendMsg(): void {\r\n    this.chatService.send(this.screen_name, this.text, this.opposite.id)\r\n    .subscribe(result => {\r\n      if(!result){\r\n        this.snackBar.open('送信できませんでした', '閉じる', {duration: 5000});\r\n      }\r\n      else{\r\n        this.text = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  initMsg(): void {\r\n    this.chatService.update(this.screen_name, this.opposite.id)\r\n    .subscribe(messages => {\r\n      messages.forEach(msg => {\r\n        let date = new Date(Number(msg.timestamp));\r\n        this.messages.push({\r\n          id: msg.id,\r\n          self: msg.self,\r\n          text: msg.text,\r\n          timestamp: `${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${('0' + date.getMinutes()).slice(-2)}`\r\n        });\r\n      });\r\n      this.messages.sort((x, y) => Number(x.timestamp) - Number(y.timestamp));\r\n    });\r\n  }\r\n\r\n  getScreenName(): void {\r\n    this.chatService.getScreenName(this.screen_name, this.opposite.id)\r\n    .subscribe(screen_name => this.opposite.name = screen_name.text);\r\n  }\r\n\r\n  polling(): Observable<message[]> {\r\n    return interval(1000)\r\n    .pipe(\r\n      mergeMap(() => this.chatService.update(this.screen_name, this.opposite.id)),\r\n      takeWhile(() => true)\r\n    );\r\n  }\r\n\r\n  failed(): void{\r\n    this.snackBar.open('エラーが発生しました', '閉じる', {duration: 7000});\r\n    this.onExit();\r\n  }\r\n\r\n  onExit(): void {\r\n    this.ngOnDestroy();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subject.complete();\r\n    this.chatService.delete(this.screen_name)\r\n    .subscribe(result => {\r\n      if(result){\r\n        console.log('Deleted');\r\n        this.router.navigate(['/home']);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<!--<div fxLayout=\"column\" #scroll>\r\n    <span class=\"mat-title\">{{opposite_name}}</span>\r\n    <div *ngFor=\"let msg of messages\">\r\n        <div *ngIf=\"msg.self; else elseBlock\">\r\n            <mat-card>\r\n                <mat-card-content>\r\n                    {{msg.text}}\r\n                </mat-card-content>\r\n                <mat-card-footer>\r\n                    {{msg.timestamp}}\r\n                </mat-card-footer>\r\n            </mat-card>\r\n        </div>\r\n        <ng-template #elseBlock>\r\n            <span fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n                <mat-card>\r\n                    <mat-card-content>\r\n                        {{msg.text}}\r\n                    </mat-card-content>\r\n                    <mat-card-footer>\r\n                        {{msg.timestamp}}\r\n                    </mat-card-footer>\r\n                </mat-card>\r\n            </span>\r\n        </ng-template>\r\n    </div>\r\n\r\n\r\n    <div class=\"footer\">\r\n        <span fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\r\n            <mat-form-field class=\"full-with\">\r\n                <textarea matInput [(ngModel)]=\"text\"></textarea>\r\n            </mat-form-field>\r\n            <span fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n                <button mat-raised-button color=\"accent\" type=\"button\" (click)=\"sendMsg()\">送信</button>\r\n            </span>\r\n        </span>\r\n    </div>\r\n</div>\r\n-->\r\n\r\n<div class=\"chat-inner-container\">\r\n    <mat-toolbar class=\"toolbar\">\r\n        <span class=\"mat-title\">{{opposite.name}}</span>\r\n        <span fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n            <button mat-raised-button color=\"warn\" (click)=\"onExit()\">終了</button>\r\n        </span>\r\n    </mat-toolbar>\r\n    <div class=\"chat-content\" fxLayout=\"column\" fxLayoutAlign=\"end stretch\">\r\n        <div class=\"scroll-area\" #scrollArea>\r\n            <div class=\"messages-container\">\r\n                <div class=\"chat-message\" *ngFor=\"let msg of messages\" fxLayout=\"column\" fxLayoutAlign=\"end start\">\r\n                    <div class=\"partner\" *ngIf=\"msg.self; else elseBlock\" fxFlexAlign=\"start\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n                        <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n                            <span class=\"message mat-elevation-z1\">{{msg.text}}</span>\r\n                            <span class=\"mat-small-partner\">{{msg.timestamp}}</span>\r\n                        </div>\r\n                    </div>\r\n                    <ng-template #elseBlock>\r\n                        <div class=\"me\" fxFlexAlign=\"end\" fxLayout=\"row\" fxLayoutAlign=\"end start\">\r\n                            <div fxLayout=\"column\" fxLayoutAlign=\"start end\">\r\n                                <span class=\"message mat-elevation-z1\">{{msg.text}}</span>\r\n                                <span class=\"mat-small-me\">{{msg.timestamp}}</span>\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </div>\r\n            </div>\r\n            <div class=\"chat-respond\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <div fxFlex>\r\n                    <textarea matInput cdkTextareaAutosize cdkAutosizeMinRows=\"1\" cdkAutosizeMaxRows=\"5\" [(ngModel)]=\"text\" placeholder=\"メッセージを入力\"></textarea>\r\n                </div>\r\n                <button mat-icon-button color=\"accent\" type=\"button\" (click)=\"sendMsg()\"><mat-icon>send</mat-icon></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, shareReplay } from 'rxjs/operators';\r\nimport { user } from './models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DbService {\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  get<T>(kind: string, id: string): Observable<T> {\r\n    const url = `db/${kind}/${id}`;\r\n    return this.http.get<T>(url, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<T>())\r\n    );\r\n  }\r\n\r\n  \r\n  getAll<T>(kind: string): Observable<T[]> {\r\n    const url = `db/${kind}`;\r\n    return this.http.get<T[]>(url, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<T[]>([]))\r\n    );\r\n  }\r\n\r\n  add<T>(kind: string, data: T): Observable<boolean> {\r\n    const url = `db/${kind}`;\r\n    return this.http.post<boolean>(url, data, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    );\r\n  }\r\n\r\n  delete(kind: string, id: string): Observable<boolean>{\r\n    const url = `db/${kind}/${id}`;\r\n    return this.http.delete<boolean>(url, this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<boolean>(false))\r\n    );\r\n  }\r\n\r\n  getEmail(): Observable<string>{\r\n    return this.http.get<string>('db/email', this.httpOptions)\r\n    .pipe(\r\n      catchError(this.handleError<string>(''))\r\n    )\r\n  }\r\n\r\n  private handleError<T>(result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { ChatService } from '../chat.service';\r\nimport { dmUser } from '../models/dmUser';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-dm-list',\r\n  templateUrl: './dm-list.component.html',\r\n  styleUrls: ['./dm-list.component.scss']\r\n})\r\nexport class DmListComponent implements OnInit {\r\n  dmUserList: dmUser[] = [];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DmListComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public screen_name: string,\r\n    private router: Router,\r\n    private chatService: ChatService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getDmUserList();\r\n  }\r\n\r\n  getDmUserList(): void {\r\n    this.chatService.getdmUserList(this.screen_name)\r\n    .subscribe(dmUserList => this.dmUserList = dmUserList);\r\n  }\r\n\r\n  onDM(dmUser: string): void {\r\n    this.router.navigate([`/home/dm/${this.screen_name}/${dmUser}`]);\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<h2 mat-dialog-title>DMを開始するユーザーを選択します</h2>\r\n<div mat-dialog-content>\r\n    <div fxLayout=\"column\">\r\n        <div *ngFor=\"let dmUser of dmUserList\">\r\n            <a (click)=\"onDM(dmUser.userId)\">\r\n                <mat-card>{{dmUser.screenName}}</mat-card>\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div mat-dialog-actions class=\"dialog-buttons\">\r\n    <button mat-button class=\"cancel-btn\" (click)=\"onCancel()\">キャンセル</button>\r\n</div>\r\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DbService } from '../db.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Component({\n  selector: 'app-dmtool-delete-sp',\n  templateUrl: './dmtool-delete-sp.component.html',\n  styleUrls: ['./dmtool-delete-sp.component.scss']\n})\nexport class DmtoolDeleteSpComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<DmtoolDeleteSpComponent>,\n    @Inject(MAT_DIALOG_DATA) public screen_name: string,\n    private dbService: DbService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  onDelete(): void {\n    this.dbService.delete('special', this.screen_name)\n    .subscribe(result => {\n      if(result){\n        this.snackBar.open('削除しました', '閉じる', {duration: 5000});\n        this.dialogRef.close();\n      }\n      else{\n        this.snackBar.open('削除できませんでした', '閉じる', {duration: 7000});\n      }\n    })\n  }\n\n}\n","<h2 mat-dialog-title>@{{screen_name}} を本当に削除しますか？</h2>\r\n<div mat-dialog-content>\r\n  <p></p>\r\n</div>\r\n<div mat-dialog-actions class=\"dialog-buttons\">\r\n  <button mat-button (click)=\"onCancel()\">キャンセル</button>\r\n  <span fxFlexOffset=\"auto\">\r\n    <button mat-raised-button color=\"warn\" (click)=\"onDelete()\">削除</button>\r\n  </span>\r\n</div>","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DbService } from '../db.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-dmtool-delete',\r\n  templateUrl: './dmtool-delete.component.html',\r\n  styleUrls: ['./dmtool-delete.component.scss']\r\n})\r\nexport class DmtoolDeleteComponent implements OnInit {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DmtoolDeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public screen_name: string,\r\n    private dbService: DbService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onDelete(): void {\r\n    this.dbService.delete('twitter', this.screen_name)\r\n    .subscribe(result => {\r\n      if(result){\r\n        this.snackBar.open('削除しました', '閉じる', {duration: 5000});\r\n        this.dialogRef.close();\r\n      }\r\n      else{\r\n        this.snackBar.open('削除できませんでした', '閉じる', {duration: 7000});\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<h2 mat-dialog-title>@{{screen_name}} を本当に削除しますか？</h2>\r\n<div mat-dialog-content>\r\n  <p>連携も解除されます</p>\r\n</div>\r\n<div mat-dialog-actions class=\"dialog-buttons\">\r\n  <button mat-button (click)=\"onCancel()\">キャンセル</button>\r\n  <span fxFlexOffset=\"auto\">\r\n    <button mat-raised-button color=\"warn\" (click)=\"onDelete()\">削除</button>\r\n  </span>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { special } from '../models/special';\nimport { DbService } from '../db.service';\n\n@Component({\n  selector: 'app-dmtool-register-sp',\n  templateUrl: './dmtool-register-sp.component.html',\n  styleUrls: ['./dmtool-register-sp.component.scss']\n})\nexport class DmtoolRegisterSpComponent implements OnInit {\n  form!: FormGroup;\n  screenNameControl = new FormControl(null, Validators.required);\n\n  constructor(\n    public dialogRef: MatDialogRef<DmtoolRegisterSpComponent>,\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar,\n    private dbService: DbService\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      screenName: this.screenNameControl\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  onSubmit(): void {\n    let special: special = {\n      screen_name: this.form.get('screenName')?.value,\n    }\n    this.dbService.get<special>('special', special.screen_name)\n    .subscribe(exist => {\n      if(exist){\n        this.snackBar.open('このTwitter IDは既に登録済みです', '閉じる', { duration: 7000 });\n      }\n      else{\n        this.dbService.add<special>('special', special)\n        .subscribe(result => {\n          if(result){\n            this.snackBar.open('登録しました', '閉じる', {duration: 5000});\n            this.dialogRef.close();\n          }\n          else{\n            this.snackBar.open('登録できませんでした', '閉じる', {duration: 7000});\n          }\n        });\n      }\n    });\n  }\n\n}\n","<h2 mat-dialog-title>Twitter ID を登録します</h2>\n<form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\n  <div mat-dialog-content>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Twitter ID</mat-label>\n        <input matInput placeholder=\"abc123\" formControlName=\"screenName\" autocomplete=\"off\">\n        <mat-error *ngIf=\"screenNameControl.hasError('required')\">\n            <strong>Twitter ID を入力してください</strong>\n        </mat-error>\n      </mat-form-field>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-button type=\"button\" (click)=\"onCancel()\">キャンセル</button>\n    <span fxLayout=\"row\" fxFlexOffset=\"auto\">\n      <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">登録</button>\n    </span>\n  </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { twitter } from '../models/twitter';\nimport { DbService } from '../db.service';\n\n@Component({\n  selector: 'app-dmtool-register',\n  templateUrl: './dmtool-register.component.html',\n  styleUrls: ['./dmtool-register.component.scss']\n})\nexport class DmtoolRegisterComponent implements OnInit {\n  form!: FormGroup;\n  screenNameControl = new FormControl(null, Validators.required);\n\n  constructor(\n    public dialogRef: MatDialogRef<DmtoolRegisterComponent>,\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar,\n    private dbService: DbService\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      screenName: this.screenNameControl\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  onSubmit(): void {\n    let twitter: twitter = {\n      screen_name: this.form.get('screenName')?.value,\n      authorized: false,\n      subsc: false\n    }\n    this.dbService.get<twitter>('twitter', twitter.screen_name)\n    .subscribe(exist => {\n      if(exist){\n        this.snackBar.open('このTwitter IDは既に登録済みです', '閉じる', { duration: 7000 });\n      }\n      else{\n        this.dbService.add<twitter>('twitter', twitter)\n        .subscribe(result => {\n          if(result){\n            this.snackBar.open('登録しました', '閉じる', {duration: 5000});\n            this.dialogRef.close();\n          }\n          else{\n            this.snackBar.open('登録できませんでした', '閉じる', {duration: 7000});\n          }\n        });\n      }\n    });\n  }\n\n}\n","<h2 mat-dialog-title>Twitter ID を登録します</h2>\n<form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\n  <div mat-dialog-content>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Twitter ID</mat-label>\n        <input matInput placeholder=\"abc123\" formControlName=\"screenName\" autocomplete=\"off\">\n        <mat-error *ngIf=\"screenNameControl.hasError('required')\">\n            <strong>Twitter ID を入力してください</strong>\n        </mat-error>\n      </mat-form-field>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-button type=\"button\" (click)=\"onCancel()\">キャンセル</button>\n    <span fxLayout=\"row\" fxFlexOffset=\"auto\">\n      <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">登録</button>\n    </span>\n  </div>\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DmtoolRegisterComponent } from '../dmtool-register/dmtool-register.component';\r\nimport { DbService } from '../db.service';\r\nimport { twitter } from '../models/twitter';\r\nimport { special } from '../models/special';\r\nimport { DmtoolDeleteComponent } from '../dmtool-delete/dmtool-delete.component';\r\nimport { DmtoolRegisterSpComponent } from '../dmtool-register-sp/dmtool-register-sp.component';\r\nimport { DmtoolDeleteSpComponent } from '../dmtool-delete-sp/dmtool-delete-sp.component';\r\nimport { DmListComponent } from '../dm-list/dm-list.component';\r\nimport { ChatService } from '../chat.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-dmtool',\r\n  templateUrl: './dmtool.component.html',\r\n  styleUrls: ['./dmtool.component.scss']\r\n})\r\nexport class DmtoolComponent implements OnInit {\r\n  twitters: twitter[] = [];\r\n  specials: special[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    public dialog: MatDialog,\r\n    private dbService: DbService,\r\n    private chatService: ChatService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getTwitters();\r\n    this.getSpecials();\r\n  }\r\n\r\n  onDM(screen_name: string): void {\r\n    let dialogRef = this.dialog.open(DmListComponent, {\r\n      width: '400px',\r\n      data: screen_name\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {\r\n      this.ngOnInit();\r\n    });\r\n  }\r\n\r\n  onOAuth(screen_name: string): void {\r\n    this.router.navigate(['/oauth'], {queryParams: {screen_name: screen_name}});\r\n  }\r\n\r\n  onDelete(screen_name: string){\r\n    let dialogRef = this.dialog.open(DmtoolDeleteComponent, {\r\n      width: '400px',\r\n      data: screen_name\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {\r\n      this.ngOnInit();\r\n    });\r\n  }\r\n\r\n  onDestroy(screen_name: string): void {\r\n    this.chatService.delete(screen_name)\r\n    .subscribe(result => {\r\n      if(result){\r\n        this.snackBar.open('正常に終了できました', '閉じる', {duration: 5000});\r\n        this.ngOnInit();\r\n      }\r\n      else{\r\n        this.snackBar.open('エラーが発生しました', '閉じる', {duration: 7000});\r\n      }\r\n    })\r\n  }\r\n\r\n  onRegister(): void {\r\n    let dialogRef = this.dialog.open(DmtoolRegisterComponent, {\r\n      width: '400px'\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {\r\n      this.ngOnInit();\r\n    });\r\n  }\r\n\r\n  getTwitters(): void {\r\n    this.dbService.getAll<twitter>('twitters')\r\n    .subscribe(twitters => this.twitters = twitters);\r\n  }\r\n  \r\n  onRegisterSP(): void {\r\n    let dialogRef = this.dialog.open(DmtoolRegisterSpComponent, {\r\n      width: '400px'\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {\r\n      this.ngOnInit();\r\n    });\r\n\r\n  }\r\n\r\n  onDeleteSP(screen_name: string): void {\r\n    let dialogRef = this.dialog.open(DmtoolDeleteSpComponent, {\r\n      width: '400px',\r\n      data: screen_name\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {\r\n      this.ngOnInit();\r\n    });\r\n\r\n  }\r\n\r\n  getSpecials(): void {\r\n    this.dbService.getAll<special>('specials')\r\n    .subscribe(spcials => this.specials = spcials);\r\n  }\r\n}\r\n","<mat-tab-group>\r\n    <mat-tab label=\"一覧\">\r\n        <div fxLayout=\"column\">\r\n            <div>\r\n                <span class=\"register-btn\" fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n                    <button mat-raised-button color=\"accent\" (click)=\"onRegister()\">登録</button>\r\n                </span>\r\n            </div>\r\n            <div *ngFor=\"let twitter of twitters\">\r\n                <mat-card>\r\n                    <mat-card-title>\r\n                        @{{twitter.screen_name}}\r\n                    </mat-card-title>\r\n                    <mat-card-content>\r\n                        <span fxLayout=\"column\" fxLayoutGap=\"8px\">\r\n                            <div *ngIf=\"twitter.subsc\">\r\n                                <button mat-icon-button type=\"button\" color=\"warn\" (click)=\"onDestroy(twitter.screen_name)\"><mat-icon>warning</mat-icon></button>\r\n                                <span class=\"warn\">DMが正常に終了できていません! 左のアイコンを触ってください</span>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"twitter.authorized; else elseBlock\">\r\n                                <span>連携済み</span>\r\n                            </div>\r\n                            <ng-template #elseBlock>\r\n                                <span class=\"warn\">未連携</span>\r\n                            </ng-template>\r\n                        </span>\r\n                    </mat-card-content>\r\n                    <mat-divider inset></mat-divider>\r\n                    <mat-card-actions>\r\n                        <button mat-button (click)=\"onDelete(twitter.screen_name)\">削除</button>\r\n                        <span fxlayout=\"row\" fxFlexOffset=\"auto\" fxLayoutGap=\"8px\">\r\n                            <button *ngIf=\"!twitter.authorized; else elseBlock2\" mat-raised-button color=\"accent\" (click)=\"onOAuth(twitter.screen_name)\">連携</button>\r\n                            <ng-template #elseBlock2>\r\n                                <button mat-raised-button color=\"primary\" (click)=\"onDM(twitter.screen_name)\" [disabled]=\"twitter.subsc\">DM</button>\r\n                            </ng-template>\r\n                        </span>\r\n                    </mat-card-actions>\r\n                </mat-card>\r\n            </div>\r\n        </div>\r\n    </mat-tab>\r\n    <mat-tab label=\"特殊\">\r\n        <div fxLayout=\"column\">\r\n            <div>\r\n                <p class=\"mat-small\">このアカウントからのDMは特殊通知になります</p>\r\n                <span class=\"register-btn\" fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n                    <button mat-raised-button color=\"accent\" (click)=\"onRegisterSP()\">登録</button>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <div *ngFor=\"let special of specials\">\r\n            <mat-card>\r\n                <mat-card-title>@{{special.screen_name}}</mat-card-title>\r\n                <mat-divider inset></mat-divider>\r\n                <mat-card-actions>\r\n                    <span fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n                        <button mat-button (click)=\"onDeleteSP(special.screen_name)\">削除</button>\r\n                    </span>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </div>\r\n    </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor(\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    /* Initial display */\r\n    let initial = '/home/account';\r\n    console.log(this.router.routerState.snapshot.url);\r\n    if(this.router.routerState.snapshot.url !== '/home'){\r\n      this.router.navigate([this.router.routerState.snapshot.url]);\r\n    }\r\n    else{\r\n      this.router.navigate([initial]);\r\n    }\r\n  }\r\n\r\n}\r\n","<app-navi>\r\n    <router-outlet></router-outlet>\r\n</app-navi>","import { Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { log } from '../models/log';\r\nimport { DbService } from '../db.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { SpinnerService } from '../spinner.service';\r\n\r\nexport interface displayData {\r\n  no: number,\r\n  date: string,\r\n  screen_name: string,\r\n  event: string\r\n}\r\n\r\n@Component({\r\n  selector: 'app-log',\r\n  templateUrl: './log.component.html',\r\n  styleUrls: ['./log.component.scss']\r\n})\r\nexport class LogComponent implements OnInit, AfterViewInit{\r\n  displayedColumns: string[] = [\r\n    'no',\r\n    'date',\r\n    'screen_name',\r\n    'event'\r\n  ];\r\n  dataSource = new MatTableDataSource<displayData>();\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  constructor(\r\n    private dbService: DbService,\r\n    private snackBar: MatSnackBar,\r\n    private spinnerService: SpinnerService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getLogs();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  getLogs(): void {\r\n    this.spinnerService.attach();\r\n    this.dbService.getAll<log>('logs')\r\n    .subscribe(logs => {\r\n      if(logs.length === 0){\r\n        this.snackBar.open('イベントがありません', '閉じる', {duration: 5000});\r\n        this.spinnerService.detach();\r\n        return;\r\n      }\r\n      let displaylogs: displayData[] = [];\r\n      logs.forEach(log => {\r\n        let time = new Date(Number(log.timestamp));\r\n        let event: string = '';\r\n        switch(log.event){\r\n          case 1:\r\n            event = 'DMリクエスト';\r\n            break;\r\n          case 2:\r\n            event = 'DM受信';\r\n            break;\r\n          case 3:\r\n            event = '特殊DM受信';\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        displaylogs.push({\r\n          no: log.no,\r\n          date: `${time.getFullYear()}/${this.pad(time.getMonth() + 1)}/${this.pad(time.getDate())}`,\r\n          //time: `${this.pad(time.getHours())}:${this.pad(time.getMinutes())}:${this.pad(time.getSeconds())}`,\r\n          screen_name: log.screen_name,\r\n          event: event\r\n        });\r\n      });\r\n      this.dataSource.data = displaylogs;\r\n      this.spinnerService.detach();\r\n    });\r\n  }\r\n\r\n  pad(number: number): string {\r\n    let str: string = `${('0' + String(number)).slice(-2)}`;\r\n    return str;\r\n  }\r\n\r\n  onRefresh(): void {\r\n    this.ngOnInit();\r\n  }\r\n\r\n}\r\n","<mat-tab-group>\r\n    <mat-tab label=\"一覧\">\r\n            <!--<div class=\"header\">\r\n                <title>イベントログ</title>\r\n                <span fxLayout=\"row\" fxFlexOffset=\"auto\">\r\n                    <button mat-icon-button color=\"primary\" (click)=\"onRefresh()\"><mat-icon class=\"refresh-icon\">refresh</mat-icon></button>\r\n                </span>\r\n            </div>-->\r\n        <div class=\"mat-elevation-z8\">\r\n            <table mat-table [dataSource]=\"dataSource\" matSort matSortActive=\"no\" matSortDirection=\"desc\">\r\n\r\n                <!--- Note that these columns can be defined in any order.\r\n                    The actual rendered columns are set as a property on the row definition\" -->\r\n            \r\n                <!-- no Column -->\r\n                <ng-container matColumnDef=\"no\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>No.</th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.no}} </td>\r\n                </ng-container>\r\n\r\n                <!-- date Column -->\r\n                <ng-container matColumnDef=\"date\">\r\n                    <th mat-header-cell *matHeaderCellDef>日付</th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.date}} </td>\r\n                </ng-container>\r\n\r\n                <!-- time Column -->\r\n                <!--<ng-container matColumnDef=\"time\">\r\n                    <th mat-header-cell *matHeaderCellDef>時刻</th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.time}} </td>\r\n                </ng-container>-->\r\n\r\n                <!-- screen_name Column -->\r\n                <ng-container matColumnDef=\"screen_name\">\r\n                    <th mat-header-cell *matHeaderCellDef>ID</th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.screen_name}} </td>\r\n                </ng-container>\r\n\r\n                <!-- event Column -->\r\n                <ng-container matColumnDef=\"event\">\r\n                    <th mat-header-cell *matHeaderCellDef>イベント</th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.event}} </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n            <mat-paginator class=\"marginless-paginator-range-label\" [pageSizeOptions]=\"[50, 200, 1000]\"></mat-paginator>\r\n        </div>\r\n        <button class=\"refresh-btn\" mat-fab color=\"primary\" (click)=\"onRefresh()\"><mat-icon>refresh</mat-icon></button>\r\n    </mat-tab>\r\n    <mat-tab label=\"集計\">\r\n        <ng-template matTabContent>\r\n            <app-summary></app-summary>\r\n        </ng-template>\r\n    </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { user } from '../models/user';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  form!: FormGroup;\n  emailControl = new FormControl(null, [\n    Validators.required,\n    Validators.email\n  ]);\n  passwordControl = new FormControl(null, Validators.required);\n  redirectTo: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private snackBar: MatSnackBar,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: this.emailControl,\n      password: this.passwordControl\n    });\n    this.redirectTo = this.route.snapshot.queryParamMap.get('redirectTo');\n  }\n\n  onSubmit(): void {\n    let user: user = {\n      email: this.form.get('email')?.value,\n      password: this.form.get('password')?.value\n    }\n    this.authService.login(user)\n    .subscribe(result => {\n      if(result){\n        if(!this.redirectTo){\n          this.router.navigate(['/home']);\n        }\n        else{\n          this.router.navigate([this.redirectTo]);\n        }\n      }\n      else{\n        this.loginFailed();\n      }\n    });\n  }\n\n  loginFailed(): void {\n    this.snackBar.open('ログインできませんでした', '閉じる', { duration: 7000 });\n  }\n\n\n}\n","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <mat-card class=\"box\">\r\n      <p class=\"img_logo\">\r\n        <img src=\"assets/icon96.png\"/>\r\n      </p>\r\n      <mat-card-header>\r\n        <mat-card-title>DM管理ツール</mat-card-title>\r\n        <mat-card-subtitle>Twitter連携システム</mat-card-subtitle>\r\n      </mat-card-header>\r\n  \r\n      <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\r\n        <mat-card-content>\r\n          <mat-form-field class=\"example-full-width\">\r\n            <input matInput placeholder=\"メールアドレス\" type=\"email\" name=\"email\" formControlName=\"email\">\r\n            <mat-error *ngIf=\"emailControl.hasError('required') || emailControl.hasError('email')\">\r\n                <strong>メールアドレスを入力してください</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n  \r\n          <mat-form-field class=\"example-full-width\">\r\n            <input matInput placeholder=\"パスワード\" type=\"password\" name=\"password\" formControlName=\"password\" autocomplete=\"off\">\r\n            <mat-error *ngIf=\"passwordControl.hasError('required')\">\r\n                <strong>パスワードを入力してください</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </mat-card-content>\r\n        <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n          <a mat-button routerLink=\"/register\" routerLinkActive=\"active\">新規登録</a>\r\n          <button mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">ログイン</button>\r\n        </span>\r\n      </form>\r\n      <!--<mat-card-footer class=\"card-footer\">\r\n        <span fxFlexOffset=\"auto\">\r\n          <a mat-button routerLink=\"/forgot\">パスワードを再発行</a>\r\n        </span>\r\n      </mat-card-footer>-->\r\n    </mat-card>\r\n    \r\n  </div>\r\n","import { MatPaginatorIntl } from '@angular/material/paginator';\r\n\r\nexport class MatPaginatorIntlJa extends MatPaginatorIntl {\r\n  override itemsPerPageLabel = '件数';\r\n  override nextPageLabel     = '次へ';\r\n  override previousPageLabel = '戻る';\r\n\r\n  override getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length === 0 || pageSize === 0) { return `${length} 件中 0`; }\r\n\r\n    length = Math.max(length, 0);\r\n\r\n    const startIndex = page * pageSize;\r\n\r\n    const endIndex = startIndex < length ?\r\n      Math.min(startIndex + pageSize, length) :\r\n      startIndex + pageSize;\r\n\r\n    return `全 ${length} 件中 ${startIndex + 1} - ${endIndex} 件表示`;\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DbService } from '../db.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SpinnerService } from '../spinner.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-navi-delete',\r\n  templateUrl: './navi-delete.component.html',\r\n  styleUrls: ['./navi-delete.component.scss']\r\n})\r\nexport class NaviDeleteComponent implements OnInit {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<NaviDeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public email: string,\r\n    private dbService: DbService,\r\n    private snackBar: MatSnackBar,\r\n    private spinnerService: SpinnerService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onDelete(): void {\r\n    this.spinnerService.attach();\r\n    this.dbService.delete('user', this.email)\r\n    .subscribe(result => {\r\n      if(result){\r\n        this.spinnerService.detach();\r\n        this.snackBar.open('削除しました', '閉じる', {duration: 5000});\r\n        this.router.navigate(['/home']);\r\n        this.dialogRef.close();\r\n      }\r\n      else{\r\n        this.spinnerService.detach();\r\n        this.snackBar.open('削除できませんでした', '閉じる', {duration: 7000});\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<h2 mat-dialog-title>本当に削除しますか？</h2>\r\n<div mat-dialog-content>\r\n  <p><strong>{{email}}</strong> の全てのデータが削除されます</p>\r\n</div>\r\n<div mat-dialog-actions class=\"dialog-buttons\">\r\n  <button mat-button (click)=\"onCancel()\">キャンセル</button>\r\n  <span fxFlexOffset=\"auto\">\r\n    <button mat-raised-button color=\"warn\" (click)=\"onDelete()\">削除</button>\r\n  </span>\r\n</div>","import { Component, OnInit, ViewChild} from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { DbService } from '../db.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { NaviDeleteComponent } from '../navi-delete/navi-delete.component';\r\n\r\n@Component({\r\n  selector: 'app-navi',\r\n  templateUrl: './navi.component.html',\r\n  styleUrls: ['./navi.component.scss']\r\n})\r\nexport class NaviComponent implements OnInit {\r\n  email: string = '';\r\n  @ViewChild('drawer') drawer!: MatDrawer;\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay(1)\r\n    );\r\n\r\n  constructor(\r\n    private breakpointObserver: BreakpointObserver,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private snackBar: MatSnackBar,\r\n    private dbService: DbService,\r\n    public dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getEmail();\r\n  }\r\n\r\n  onLogout(): void {\r\n    this.authService.logout()\r\n    .subscribe(result => {\r\n      if(result){\r\n        this.router.navigate(['/login']);\r\n      }\r\n      else{\r\n        this.snackBar.open('ログアウトできませんでした', '閉じる', { duration: 5000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  onDelete(){\r\n    this.dialog.open(NaviDeleteComponent, {\r\n      width: '400px',\r\n      data: this.email\r\n    });\r\n  }\r\n\r\n  onRouter(place: string): void {\r\n    this.router.navigate([`/${place}`]);\r\n    this.isHandset$\r\n    .subscribe(result => {\r\n      if(result){\r\n        this.drawer.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  getEmail(): void {\r\n    this.dbService.getEmail()\r\n    .subscribe(email => this.email = email);\r\n  }\r\n\r\n}\r\n","<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\r\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\r\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\r\n      [opened]=\"(isHandset$ | async) === false\">\r\n    <mat-toolbar>DM管理ツール</mat-toolbar>\r\n    <!--<mat-divider></mat-divider>-->\r\n    <mat-nav-list>\r\n      <a mat-list-item (click)=\"onRouter('home/account')\"><mat-icon class=\"list-icon\">group</mat-icon>Twitter ID 連携</a>\r\n      <a mat-list-item (click)=\"onRouter('home/log')\"><mat-icon class=\"list-icon\">description</mat-icon>イベントログ</a>\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content #scroll>\r\n    <mat-toolbar>\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Toggle sidenav\"\r\n        mat-icon-button\r\n        (click)=\"drawer.toggle()\"\r\n        *ngIf=\"(isHandset$ | async)\">\r\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n      </button>\r\n      <!--<span class=\"mat-headline\">タイトル未定</span>-->\r\n      <span class=\"navi-email\" fxFlexOffset=\"auto\">\r\n        <button\r\n          type=\"button\"\r\n          mat-icon-button\r\n          [matMenuTriggerFor]=\"userMenu\">\r\n          <mat-icon>keyboard_arrow_down</mat-icon>\r\n        </button>\r\n        <mat-menu #userMenu=\"matMenu\" class=\"user-profile\">\r\n              <span mat-menu-item>{{email}}</span>\r\n              <mat-divider></mat-divider>\r\n              <button mat-menu-item (click)=\"onLogout()\">\r\n                  <mat-icon>logout</mat-icon>\r\n                  ログアウト\r\n              </button>\r\n              <button mat-menu-item (click)=\"onDelete()\">\r\n                  <mat-icon>delete_forever</mat-icon>\r\n                  アカウント削除\r\n              </button>\r\n      </mat-menu>\r\n      </span>\r\n    </mat-toolbar>\r\n    <ng-content></ng-content>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SpinnerService } from '../spinner.service';\r\n\r\n@Component({\r\n  selector: 'app-oauth',\r\n  templateUrl: './oauth.component.html',\r\n  styleUrls: ['./oauth.component.scss']\r\n})\r\nexport class OauthComponent implements OnInit {\r\n  params: Params = {};\r\n  iframe: boolean = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private snackBar: MatSnackBar,\r\n    private spinnerService: SpinnerService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.spinnerService.attach();\r\n    this.params = this.route.snapshot.queryParams;\r\n    if(this.params['screen_name'] && !this.params['oauth_token'] && !this.params['oauth_verifier']){\r\n      if(this.params['denied']){\r\n        this.spinnerService.detach();\r\n        this.router.navigate(['/home']);\r\n        return;\r\n      }\r\n      /* Step1: Request Token */\r\n      this.authService.requestToken(this.params['screen_name'])\r\n      .subscribe(result => {\r\n        if(result.oauth_callback_confirmed){\r\n          window.location.href = encodeURI(`https://api.twitter.com/oauth/authorize?oauth_token=${result.oauth_token}&force_login=true&screen_name=${this.params['screen_name']}`);\r\n        }\r\n        else{\r\n          console.log('Request token failed');\r\n          this.failed();\r\n        }\r\n      });\r\n    }\r\n    else if(this.params['screen_name'] && this.params['oauth_token'] && this.params['oauth_verifier']){\r\n      /* Step2: Authorize token */\r\n      this.authService.checkToken(this.params['screen_name'], this.params['oauth_token'])\r\n      .subscribe(result => {\r\n        if(result){\r\n          /* Step3: Exchange token */\r\n          this.authService.exchangeToken(this.params['screen_name'], this.params['oauth_verifier'])\r\n          .subscribe(result => {\r\n            if(result){\r\n              this.spinnerService.detach();\r\n              this.snackBar.open('連携に成功しました', '閉じる', { duration: 5000 });\r\n              this.router.navigate(['home']);\r\n            }\r\n            else{\r\n              console.log('Exchange token failed');\r\n              this.failed();\r\n            }\r\n          })\r\n        }\r\n        else{\r\n          console.log('Check token failed');\r\n          this.failed();\r\n        }\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  failed(): void {\r\n    this.spinnerService.detach();\r\n    this.snackBar.open('連携に失敗しました', '閉じる', { duration: 7000 });\r\n    this.router.navigate(['home']);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { user } from '../models/user';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  form!: FormGroup;\n  emailControl = new FormControl(null, [\n    Validators.required,\n    Validators.email\n  ]);\n  passwordControl = new FormControl(null, Validators.required);\n  password2Control = new FormControl(null, Validators.required);\n\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: this.emailControl,\n      password: this.passwordControl,\n      password2: this.password2Control\n    });\n  }\n\n  onSubmit() {\n    let user : user = {\n      email: this.form.get('email')?.value,\n      password: this.form.get('password')?.value\n    }\n    if(user.password !== this.form.get('password2')?.value){\n      this.snackBar.open('パスワードが一致していません', '閉じる', { duration: 7000 });\n      this.form.get('password2')?.setValue(null);\n      return;\n    }\n    else{\n      this.authService.exist('user', user.email)\n      .subscribe(exist => {\n        if(exist){\n          this.snackBar.open('このアドレスは既に登録済みです', '閉じる', { duration: 7000 });\n        }\n        else{\n          this.authService.create(user)\n          .subscribe(result => {\n            if(result){\n              this.authService.login(user)\n              .subscribe(() => {\n                if(result){\n                  this.router.navigate(['home']);\n                }\n                else{\n                  this.snackBar.open('ログインできませんでした', '閉じる', { duration: 7000 });\n                }\n              });\n            }\n            else{\n              this.snackBar.open('登録できませんでした', '閉じる', { duration: 7000 });\n            }\n\n          });\n        }\n      });\n    }\n  }\n}\n","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <mat-card class=\"box\">\r\n      <p class=\"img_logo\">\r\n        <img src=\"assets/icon96.png\"/>\r\n      </p>\r\n      <mat-card-header>\r\n        <mat-card-title>DM管理ツール</mat-card-title>\r\n        <mat-card-subtitle>Twitter連携システム</mat-card-subtitle>\r\n      </mat-card-header>\r\n  \r\n      <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\r\n  \r\n        <mat-card-content>\r\n\r\n          <mat-form-field class=\"example-full-width\">\r\n            <input matInput placeholder=\"メールアドレス\" type=\"email\" name=\"email\" formControlName=\"email\">\r\n            <mat-error *ngIf=\"emailControl.hasError('required') || emailControl.hasError('email')\">\r\n                <strong>メールアドレスを入力してください</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n  \r\n          <mat-form-field class=\"example-full-width\">\r\n            <input matInput placeholder=\"パスワード\" type=\"password\" name=\"password\" formControlName=\"password\" autocomplete=\"off\">\r\n            <mat-error *ngIf=\"passwordControl.hasError('required')\">\r\n                <strong>パスワードを入力してください</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field class=\"example-full-width\">\r\n            <input matInput placeholder=\"パスワード(確認)\" type=\"password\" name=\"password2\" formControlName=\"password2\" autocomplete=\"off\">\r\n            <mat-error *ngIf=\"password2Control.hasError('required')\">\r\n                <strong>パスワード(確認)を入力してください</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n  \r\n        </mat-card-content>\r\n        <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n          <a mat-button routerLink=\"/login\" routerLinkActive=\"active\">ログインへ</a>\r\n          <button mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">登録</button>\r\n        </span>\r\n      </form>\r\n    </mat-card>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { MatSpinner } from '@angular/material/progress-spinner';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpinnerService {\r\n\r\n  constructor(\r\n    private overlay: Overlay\r\n  ) { }\r\n  \r\n  overlayRef = this.overlay.create({\r\n    hasBackdrop: true,\r\n    positionStrategy: this.overlay\r\n      .position().global().centerHorizontally().centerVertically()\r\n  });\r\n\r\n  attach(): void {\r\n    this.overlayRef.attach(new ComponentPortal(MatSpinner));\r\n  }\r\n  \r\n  detach(): void {\r\n    this.overlayRef.detach();\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { DbService } from '../db.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { summary } from '../models/summary';\r\nimport { SpinnerService } from '../spinner.service';\r\n\r\n\r\n\r\nexport interface displayData {\r\n  screen_name: string,\r\n  date: number[],\r\n  sum: number\r\n}\r\n\r\n@Component({\r\n  selector: 'app-summary',\r\n  templateUrl: './summary.component.html',\r\n  styleUrls: ['./summary.component.scss']\r\n})\r\nexport class SummaryComponent implements OnInit, AfterViewInit{\r\n  displayedColumns: string[] = [\r\n    'screen_name',\r\n    'date4',\r\n    'date3',\r\n    'date2',\r\n    'date1',\r\n    'date0',\r\n    'sum'\r\n  ];\r\n  dataSource = new MatTableDataSource<displayData>();\r\n  date: Array<string> = new Array(5);\r\n  disableAnimation: boolean = true;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n\r\n  constructor(\r\n    private dbService: DbService,\r\n    private spinnerService: SpinnerService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.date[0] = `${new Date().getMonth() + 1}/${new Date().getDate()}`;\r\n    for(let i = 1; i < this.date.length; i++){\r\n      let time = new Date(Date.now() - (24 * (i - 1) * 60 * 60 + 23 * 60 * 60 + 59 * 60 + 59) * 1000);\r\n      this.date[i] = `${time.getMonth() + 1}/${time.getDate()}`;\r\n    }\r\n    this.getSummary();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n    setTimeout(() => this.disableAnimation = false);\r\n  }\r\n\r\n  getSummary(): void {\r\n    this.spinnerService.attach();\r\n    this.dbService.getAll<summary>('summary')\r\n    .subscribe(summary => {\r\n      if(summary.length === 0){\r\n        this.snackBar.open('連携しているTwitter ID がありません', '閉じる', {duration: 5000});\r\n        this.spinnerService.detach();\r\n        return;\r\n      }\r\n      let displaylogs: displayData[] = [];\r\n      let sum_date: Array<number> = new Array(5);\r\n      sum_date.fill(0);\r\n      let sum_month: number = 0;\r\n      summary.forEach(el => {\r\n        for(let i = 0; i < el.date.length; i++){\r\n          sum_date[i] += el.date[i];\r\n        }\r\n        sum_month += el.sum;\r\n        displaylogs.push({\r\n          screen_name: el.screen_name,\r\n          date: el.date,\r\n          sum: el.sum\r\n        });\r\n      });\r\n      displaylogs.unshift({\r\n        screen_name: '全アカウント',\r\n        date: sum_date,\r\n        sum: sum_month\r\n      });\r\n      this.dataSource.data = displaylogs;\r\n      this.spinnerService.detach();\r\n    });\r\n  }\r\n\r\n  onRefresh(): void {\r\n    this.ngOnInit();\r\n  }\r\n\r\n}\r\n","<div class=\"mat-elevation-z8\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort>\r\n\r\n        <!--- Note that these columns can be defined in any order.\r\n            The actual rendered columns are set as a property on the row definition\" -->\r\n    \r\n        <!-- no Column -->\r\n        <ng-container matColumnDef=\"screen_name\">\r\n            <th mat-header-cell *matHeaderCellDef>DM受信数</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.screen_name}} </td>\r\n        </ng-container>\r\n\r\n        <!-- date5 Column -->\r\n        <ng-container matColumnDef=\"date4\">\r\n            <th mat-header-cell *matHeaderCellDef>{{date[4]}}</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.date[4]}} </td>\r\n        </ng-container>\r\n\r\n        <!-- date5 Column -->\r\n        <ng-container matColumnDef=\"date3\">\r\n            <th mat-header-cell *matHeaderCellDef>{{date[3]}}</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.date[3]}} </td>\r\n        </ng-container>\r\n\r\n        <!-- date3 Column -->\r\n        <ng-container matColumnDef=\"date2\">\r\n            <th mat-header-cell *matHeaderCellDef>{{date[2]}}</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.date[2]}} </td>\r\n        </ng-container>\r\n\r\n        <!-- date2 Column -->\r\n        <ng-container matColumnDef=\"date1\">\r\n            <th mat-header-cell *matHeaderCellDef>{{date[1]}}</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.date[1]}} </td>\r\n        </ng-container>\r\n\r\n        <!-- date1 Column -->\r\n        <ng-container matColumnDef=\"date0\">\r\n            <th mat-header-cell *matHeaderCellDef>{{date[0]}}</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.date[0]}} </td>\r\n        </ng-container>\r\n\r\n        <!-- sum Column -->\r\n        <ng-container matColumnDef=\"sum\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>当月</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.sum}} </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n    <mat-paginator class=\"marginless-paginator-range-label\" [pageSizeOptions]=\"[50, 200, 1000]\"></mat-paginator>\r\n</div>\r\n<div [@.disabled]=\"disableAnimation\">\r\n    <button class=\"refresh-btn\" mat-fab color=\"primary\" (click)=\"onRefresh()\"><mat-icon>refresh</mat-icon></button>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["Breakpoints","map","shareReplay","NaviDeleteComponent","i0","_r0","NaviComponent","constructor","breakpointObserver","router","authService","snackBar","dbService","dialog","observe","Handset","pipe","result","matches","ngOnInit","getEmail","onLogout","logout","subscribe","navigate","open","duration","onDelete","width","data","email","onRouter","place","isHandset$","drawer","close","selectors","viewQuery","ctx"],"sourceRoot":"webpack:///"}